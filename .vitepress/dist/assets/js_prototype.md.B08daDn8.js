import{$ as s,S as a,W as l,aF as t}from"./chunks/framework.B4ByH7pa.js";const n="/blog/assets/prototype-chain.DWeprZ0X.png",p="/blog/assets/proto__.ChEF0rID.png",g=JSON.parse('{"title":"JavaScript原型链","description":"","frontmatter":{},"headers":[],"relativePath":"js/prototype.md","filePath":"js/prototype.md","lastUpdated":1747545765000}'),h={name:"js/prototype.md"};function e(k,i,r,o,d,E){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="javascript原型链" tabindex="-1">JavaScript原型链 <a class="header-anchor" href="#javascript原型链" aria-label="Permalink to &quot;JavaScript原型链&quot;">​</a></h1><h2 id="_1、原型链的概念" tabindex="-1">1、原型链的概念 <a class="header-anchor" href="#_1、原型链的概念" aria-label="Permalink to &quot;1、原型链的概念&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">什么是原型链</p><ul><li>原型链是JavaScript实现继承的主要方式</li><li>每个函数对象都有一个原型对象（prototype）</li><li>对象会从原型对象继承属性和方法</li><li>原型对象也可能有自己的原型，形成原型链</li><li>所有对象都是new函数而得到的</li><li>原型链的基本结构就是函数==&gt;实例==&gt;原型对象三者之间的闭环</li></ul></div><div class="tip custom-block"><p class="custom-block-title">原型链的基本概念</p><ul><li><code>__proto__</code>：对象的隐式原型，指向构造函数的prototype</li><li><code>prototype</code>：构造函数的显式原型</li><li><code>constructor</code>：指向构造函数本身</li></ul></div><h2 id="_2、原型链的实现" tabindex="-1">2、原型链的实现 <a class="header-anchor" href="#_2、原型链的实现" aria-label="Permalink to &quot;2、原型链的实现&quot;">​</a></h2><h3 id="_2-1-构造函数创建对象" tabindex="-1">2.1 构造函数创建对象 <a class="header-anchor" href="#_2-1-构造函数创建对象" aria-label="Permalink to &quot;2.1 构造函数创建对象&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Hello, I&#39;m \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Hello, I&#39;m 张三</span></span></code></pre></div><h3 id="_2-2-原型链的继承" tabindex="-1">2.2 原型链的继承 <a class="header-anchor" href="#_2-2-原型链的继承" aria-label="Permalink to &quot;2.2 原型链的继承&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">grade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.grade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> grade;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置原型链</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Student;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> student</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;李四&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;三年级&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">student.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Hello, I&#39;m 李四</span></span></code></pre></div><h2 id="_3、原型链的使用场景" tabindex="-1">3、原型链的使用场景 <a class="header-anchor" href="#_3、原型链的使用场景" aria-label="Permalink to &quot;3、原型链的使用场景&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">常见使用场景</p><ol><li><p>实现继承</p><ul><li>代码复用</li><li>扩展功能</li><li>多态实现</li></ul></li><li><p>共享属性和方法</p><ul><li>减少内存占用</li><li>提高性能</li></ul></li><li><p>原型链上的方法可以被所有实例共享</p></li></ol></div><h2 id="_4、流程图" tabindex="-1">4、流程图 <a class="header-anchor" href="#_4、流程图" aria-label="Permalink to &quot;4、流程图&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">原型链流程图</p><p><img src="`+n+'" alt="原型链"></p></div><h2 id="_5、注意事项" tabindex="-1">5、注意事项 <a class="header-anchor" href="#_5、注意事项" aria-label="Permalink to &quot;5、注意事项&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">原型链的注意事项</p><ol><li><p>原型链过长会影响性能</p><ul><li>属性查找会逐级向上</li><li>建议控制原型链层级</li></ul></li><li><p>原型链上的属性是共享的</p><ul><li>引用类型属性要特别注意</li><li>实例属性会覆盖原型属性</li></ul></li><li><p>构造函数中的this指向</p><ul><li>构造函数中的this指向实例</li><li>原型方法中的this指向调用者</li></ul></li></ol></div><h2 id="_6、最佳实践" tabindex="-1">6、最佳实践 <a class="header-anchor" href="#_6、最佳实践" aria-label="Permalink to &quot;6、最佳实践&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">原型链的最佳实践</p><ol><li><p>优先使用组合继承</p><ul><li>结合构造函数和原型链的优点</li><li>避免原型链的缺点</li></ul></li><li><p>使用Object.create()创建对象</p><ul><li>更清晰的继承关系</li><li>更好的性能</li></ul></li><li><p>合理使用原型方法</p><ul><li>共享方法放在原型上</li><li>实例特有的属性放在构造函数中</li></ul></li></ol></div><h2 id="_7、常见问题" tabindex="-1">7、常见问题 <a class="header-anchor" href="#_7、常见问题" aria-label="Permalink to &quot;7、常见问题&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">原型链相关常见问题</p><ol><li><p>原型链的终点是什么？</p><ul><li>Object.prototype</li><li>再往上就是null</li></ul></li><li><p>如何判断属性是否在原型链上？</p><ul><li>hasOwnProperty()</li><li>Object.getOwnPropertyNames()</li></ul></li><li><p>如何安全地扩展原型？</p><ul><li>使用Object.defineProperty()</li><li>避免直接修改内置对象的原型</li></ul></li><li><p>a instanceof b 怎么理解？</p><ul><li>b.prototype是否存在于a的原型链上</li></ul></li><li><p>所有js对象都有__proto__吗？</p><ul><li>不是的，由Object.create(null)创建的对象没有__proto__ <img src="'+p+'" alt="对象"></li></ul></li></ol></div>',19)]))}const y=s(h,[["render",e]]);export{g as __pageData,y as default};
