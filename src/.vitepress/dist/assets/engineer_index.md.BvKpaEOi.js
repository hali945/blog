import{_ as t,C as o,c as n,o as c,ae as l,j as i,a,G as r,w as p}from"./chunks/framework.Dh1jimFm.js";const d="/assets/%E7%BC%96%E8%AF%91%E6%97%B6.Cr93VbZ2.png",u="/assets/css%E7%BC%96%E8%AF%91.DiemzZZ4.png",h="/assets/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7.DREmL2XK.png",k="/assets/devserver.DJJpyZtf.png",q=JSON.parse('{"title":"前端工程化","description":"","frontmatter":{},"headers":[],"relativePath":"engineer/index.md","filePath":"engineer/index.md"}'),m={name:"engineer/index.md"},_={class:"warning custom-block"};function E(b,s,g,v,f,S){const e=o("font");return c(),n("div",null,[s[4]||(s[4]=l('<h1 id="前端工程化" tabindex="-1">前端工程化 <a class="header-anchor" href="#前端工程化" aria-label="Permalink to &quot;前端工程化&quot;">​</a></h1><hr><h2 id="_1、前端工程化的意义" tabindex="-1">1、前端工程化的意义 <a class="header-anchor" href="#_1、前端工程化的意义" aria-label="Permalink to &quot;1、前端工程化的意义&quot;">​</a></h2><h2 id="_2、模块化和包管理" tabindex="-1">2、模块化和包管理 <a class="header-anchor" href="#_2、模块化和包管理" aria-label="Permalink to &quot;2、模块化和包管理&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">模块化</p><ul><li>模块化的本质就是分解和聚合</li><li>分解契合的是主观规律，如<code>函数</code>、<code>文件</code></li><li>聚合契合的是客观规律 文件的问题：</li><li>全局污染（分解）</li><li>依赖混乱（聚合）</li><li>模块化解决文件级别的分解/聚合问题</li></ul><p><strong>模块化的标准</strong></p><ul><li><p>1.<code>CommonJS CJS</code>(运行时)</p></li><li><p>2.AMD</p></li><li><p>3.CMD</p></li><li><p>4.UMD</p></li><li><p>5.<code>Ecmascript Module ESM</code>（编译时）</p></li><li><p>绝大部分的打包工具都是ESM，便于进行优化</p></li></ul><p><strong>模块化的实现</strong></p><ul><li>浏览器支支持<code>ESM</code></li><li>nodejs两种都支持<code>CJS/ESM</code></li><li>构建工具一般两种都支持<code>CJS/ESM</code>，像webpack，都推荐采用<code>ESM</code></li></ul></div>',5)),i("div",_,[s[2]||(s[2]=l(`<p class="custom-block-title">运行时和编译时</p><ul><li><strong>运行时</strong>：只有代码运行到这里才能知道引入的文件是哪个js【模块化代表：<code>CommonJS</code>】</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./a.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./b.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,3)),i("ul",null,[s[1]||(s[1]=i("li",null,[i("strong",null,"编译时"),a("：运行之前就能确定依赖关系【模块化代表："),i("code",null,"Ecmascript Module"),a("】")],-1)),i("li",null,[r(e,{style:{color:"green"}},{default:p(()=>s[0]||(s[0]=[a("import语句都要写在代码顶部，不能放到 if else里面")])),_:1})])]),s[3]||(s[3]=i("p",null,[i("img",{src:d,alt:""})],-1))]),s[5]||(s[5]=l('<div class="info custom-block"><p class="custom-block-title">包管理</p><ul><li>npm</li><li>pnpm</li><li>yarn</li></ul></div><h2 id="_3、js工具链" tabindex="-1">3、JS工具链 <a class="header-anchor" href="#_3、js工具链" aria-label="Permalink to &quot;3、JS工具链&quot;">​</a></h2><ul><li>语法兼容性(runtime)</li><li>API兼容性：polyfill，主要是用core-js</li><li>语言增强： tsc</li></ul><div class="info custom-block"><p class="custom-block-title">代码转换：代码集成转换工具，babel</p><ul><li>预设（本质就是一堆插件）</li><li>基础预设：@babel/preset-env</li></ul></div><h2 id="_4、css工具链" tabindex="-1">4、CSS工具链 <a class="header-anchor" href="#_4、css工具链" aria-label="Permalink to &quot;4、CSS工具链&quot;">​</a></h2><h3 id="语言缺失" tabindex="-1">语言缺失 <a class="header-anchor" href="#语言缺失" aria-label="Permalink to &quot;语言缺失&quot;">​</a></h3><ul><li>语法缺失（循环/判断/拼接）</li><li>功能缺失（颜色函数，数学函数，自定义函数）</li></ul><div class="info custom-block"><p class="custom-block-title">css预编译语言</p><ul><li>stylus</li><li>sass</li><li>less</li></ul></div><div class="info custom-block"><p class="custom-block-title">postcss</p><ul><li>后编译语言</li><li><a href="https://postcss.org/docs/" target="_blank" rel="noreferrer">postcss</a></li></ul></div><div class="tip custom-block"><p class="custom-block-title">流程</p><p><img src="'+u+'" alt=""></p></div><h2 id="_5、构建工具和脚手架" tabindex="-1">5、构建工具和脚手架 <a class="header-anchor" href="#_5、构建工具和脚手架" aria-label="Permalink to &quot;5、构建工具和脚手架&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">文件指纹</p><ul><li>没有文件指纹就会访问缓存，不会更新</li></ul></div><div class="info custom-block"><p class="custom-block-title">构建工具</p><ul><li>构建工具就是把babel/sass/postcss所做的事情统一处理了</li></ul><p><img src="'+h+'" alt=""></p></div><h3 id="开发服务器devserver" tabindex="-1">开发服务器devServer <a class="header-anchor" href="#开发服务器devserver" aria-label="Permalink to &quot;开发服务器devServer&quot;">​</a></h3><p><img src="'+k+'" alt=""></p><div class="tip custom-block"><p class="custom-block-title">脚手架</p><ul><li>vue-cli</li><li>vite</li><li>cra</li></ul></div>',16))])}const y=t(m,[["render",E]]);export{q as __pageData,y as default};
