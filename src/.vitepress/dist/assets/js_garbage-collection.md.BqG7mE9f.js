import{_ as i,c as a,o as l,ae as n}from"./chunks/framework.Dh1jimFm.js";const g=JSON.parse('{"title":"JavaScript 垃圾回收机制","description":"","frontmatter":{},"headers":[],"relativePath":"js/garbage-collection.md","filePath":"js/garbage-collection.md"}'),t={name:"js/garbage-collection.md"};function e(p,s,h,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="javascript-垃圾回收机制" tabindex="-1">JavaScript 垃圾回收机制 <a class="header-anchor" href="#javascript-垃圾回收机制" aria-label="Permalink to &quot;JavaScript 垃圾回收机制&quot;">​</a></h1><h2 id="什么是垃圾回收" tabindex="-1">什么是垃圾回收？ <a class="header-anchor" href="#什么是垃圾回收" aria-label="Permalink to &quot;什么是垃圾回收？&quot;">​</a></h2><p>垃圾回收（Garbage Collection，简称 GC）是一种自动内存管理机制。它的主要职责是跟踪和回收不再使用的内存，防止内存泄漏，确保程序能够高效地使用内存资源。</p><h2 id="垃圾回收的基本原理" tabindex="-1">垃圾回收的基本原理 <a class="header-anchor" href="#垃圾回收的基本原理" aria-label="Permalink to &quot;垃圾回收的基本原理&quot;">​</a></h2><h3 id="_1-引用计数法" tabindex="-1">1. 引用计数法 <a class="header-anchor" href="#_1-引用计数法" aria-label="Permalink to &quot;1. 引用计数法&quot;">​</a></h3><p>引用计数是最简单的垃圾回收算法。其核心思想是：</p><ul><li>每个对象都有一个引用计数器</li><li>当对象被引用时，计数器加1</li><li>当引用失效时，计数器减1</li><li>当计数器为0时，对象被视为垃圾，可以被回收</li></ul><p><strong>优点：</strong></p><ul><li>实现简单</li><li>回收及时</li></ul><p><strong>缺点：</strong></p><ul><li>无法解决循环引用问题</li><li>计数器维护开销大</li></ul><h3 id="_2-标记清除法-mark-sweep" tabindex="-1">2. 标记清除法（Mark-Sweep） <a class="header-anchor" href="#_2-标记清除法-mark-sweep" aria-label="Permalink to &quot;2. 标记清除法（Mark-Sweep）&quot;">​</a></h3><p>这是目前主流垃圾回收算法，分为两个阶段：</p><ol><li><p><strong>标记阶段</strong>：</p><ul><li>从根对象（全局对象、活动函数调用栈等）开始遍历</li><li>标记所有可达对象</li></ul></li><li><p><strong>清除阶段</strong>：</p><ul><li>遍历堆内存</li><li>清除未被标记的对象</li></ul></li></ol><p><strong>优点：</strong></p><ul><li>可以解决循环引用问题</li><li>实现相对简单</li></ul><p><strong>缺点：</strong></p><ul><li>会产生内存碎片</li><li>回收效率较低</li></ul><h3 id="_3-分代回收" tabindex="-1">3. 分代回收 <a class="header-anchor" href="#_3-分代回收" aria-label="Permalink to &quot;3. 分代回收&quot;">​</a></h3><p>现代 JavaScript 引擎（如 V8）采用分代回收策略：</p><ol><li><p><strong>新生代（New Space）</strong>：</p><ul><li>存放新创建的对象</li><li>使用 Scavenge 算法（复制算法）</li><li>回收频率高</li></ul></li><li><p><strong>老生代（Old Space）</strong>：</p><ul><li>存放存活时间较长的对象</li><li>使用标记清除或标记整理算法</li><li>回收频率低</li></ul></li></ol><h2 id="v8-引擎的垃圾回收" tabindex="-1">V8 引擎的垃圾回收 <a class="header-anchor" href="#v8-引擎的垃圾回收" aria-label="Permalink to &quot;V8 引擎的垃圾回收&quot;">​</a></h2><h3 id="新生代回收-scavenge" tabindex="-1">新生代回收（Scavenge） <a class="header-anchor" href="#新生代回收-scavenge" aria-label="Permalink to &quot;新生代回收（Scavenge）&quot;">​</a></h3><ol><li>将内存分为两个相等的空间：From 空间和 To 空间</li><li>新对象分配在 From 空间</li><li>当 From 空间快满时，触发垃圾回收： <ul><li>将存活对象复制到 To 空间</li><li>清空 From 空间</li><li>交换 From 和 To 空间</li></ul></li></ol><h3 id="老生代回收" tabindex="-1">老生代回收 <a class="header-anchor" href="#老生代回收" aria-label="Permalink to &quot;老生代回收&quot;">​</a></h3><ol><li><p><strong>标记阶段</strong>：</p><ul><li>使用三色标记法（白、灰、黑）</li><li>从根对象开始遍历</li><li>标记所有可达对象</li></ul></li><li><p><strong>清除阶段</strong>：</p><ul><li>清除未被标记的对象</li><li>整理内存碎片（可选）</li></ul></li></ol><h2 id="内存泄漏的常见原因" tabindex="-1">内存泄漏的常见原因 <a class="header-anchor" href="#内存泄漏的常见原因" aria-label="Permalink to &quot;内存泄漏的常见原因&quot;">​</a></h2><ol><li><p><strong>全局变量</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> leak</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    leaked </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;I am a leaked global variable&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>闭包</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createClosure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> largeObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(largeObject);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>定时器未清除</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果不清除，会一直占用内存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li><li><p><strong>DOM 引用</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> elements</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    button: document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 即使删除 DOM 元素，elements 对象仍然持有引用</span></span></code></pre></div></li></ol><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ol><li><p><strong>及时解除引用</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { data: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;large data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用完后解除引用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p><strong>使用 WeakMap/WeakSet</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> weakMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">weakMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当 obj 被回收时，weakMap 中的引用也会被自动回收</span></span></code></pre></div></li><li><p><strong>避免闭包陷阱</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createSafeClosure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;some data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 只使用必要的数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>及时清理定时器</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不再需要时清除</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timer);</span></span></code></pre></div></li></ol><h2 id="性能优化建议" tabindex="-1">性能优化建议 <a class="header-anchor" href="#性能优化建议" aria-label="Permalink to &quot;性能优化建议&quot;">​</a></h2><ol><li>避免频繁创建大对象</li><li>使用对象池复用对象</li><li>及时解除不需要的引用</li><li>使用 Chrome DevTools 的 Memory 面板监控内存使用</li><li>合理使用 WeakMap/WeakSet 存储临时数据</li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>垃圾回收是 JavaScript 运行时的重要机制，理解其工作原理对于编写高性能的应用程序至关重要。通过合理的内存管理和遵循最佳实践，可以有效避免内存泄漏，提高应用程序的性能和稳定性。</p>`,34)]))}const c=i(t,[["render",e]]);export{g as __pageData,c as default};
